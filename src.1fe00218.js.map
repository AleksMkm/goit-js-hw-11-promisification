{"version":3,"sources":["js/task-1.js","js/task-2.js","js/task-3.js","index.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","inputMsEl","document","querySelector","delayTimeEl","btnEl","inputValue","addEventListener","e","target","value","textContent","users","name","active","updatedUsers","table","toggleUserStateNew","allUsers","userName","map","user","randomIntegerFromInterval","min","max","Math","floor","random","makeTransactionNew","transaction","reject","id","logSuccess","arr","logError","warn","catch"],"mappings":";;;AAIA,IAAMA,EAAQ,SAAAC,GACL,OAAA,IAAIC,QAAQ,SAAAC,GACjBC,WAAW,WACTD,EAAWF,GAAAA,OAAAA,KACVA,MAIDI,EAAS,SAAAC,GAAQC,OAAAA,QAAQC,IAAsBF,kBAAAA,OAAAA,EAAlC,QAGnBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,GAEjB,IAAMK,EAAYC,SAASC,cAAc,aACnCC,EAAcF,SAASC,cAAc,YACrCE,EAAQH,SAASC,cAAc,WAEjCG,EAAa,GAEjBL,EAAUM,iBAAiB,OAAQ,SAAAC,GACjCF,GAAcE,EAAEC,OAAOC,QAGzBL,EAAME,iBAAiB,QAAS,WAC9BhB,EAAMe,GAAYN,KAAK,SAAAU,GAAUN,OAAAA,EAAYO,YAAcD;;ACW7D,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,KAAA,GAAA,GAAA,OAAA,sBAAA,CAAA,IAAA,EAAA,OAAA,sBAAA,GAAA,IAAA,EAAA,EAAA,OAAA,SAAA,GAAA,OAAA,OAAA,yBAAA,EAAA,GAAA,cAAA,EAAA,KAAA,MAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,CAAA,IAAA,EAAA,MAAA,UAAA,GAAA,UAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IAAA,GAAA,QAAA,SAAA,GAAA,EAAA,EAAA,EAAA,EAAA,MAAA,OAAA,0BAAA,OAAA,iBAAA,EAAA,OAAA,0BAAA,IAAA,EAAA,OAAA,IAAA,QAAA,SAAA,GAAA,OAAA,eAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,MAAA,OAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EArCA,IAAME,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAWnBlB,EAAS,SAAAmB,GAAgBjB,OAAAA,QAAQkB,MAAMD,IAQvCE,EAAqB,SAACC,EAAUC,GAC7B,OAAA,IAAI1B,QAAQ,SAAAC,GACjBA,EACEwB,EAASE,IAAI,SAAAC,GACXA,OAAAA,EAAKR,OAASM,EAAgBE,EAAAA,EAAAA,GAAAA,GAA9B,GAAA,CAAoCP,QAASO,EAAKP,SAAWO,QASrEJ,EAAmBL,EAAO,SAASZ,KAAKJ,GACxCqB,EAAmBL,EAAO,OAAOZ,KAAKJ;;ACrCtC,IAAM0B,EAA4B,SAACC,EAAKC,GAC/BC,OAAAA,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAiBhDK,EAAqB,SAAAC,GACnBtC,IAAAA,EAAQ+B,EAA0B,IAAK,KACtC,OAAA,IAAI7B,QAAQ,SAACC,EAASoC,GAC3BnC,WAAW,WACU8B,KAAKE,SAAW,GAGjCjC,EAAQ,CAACmC,EAAYE,GAAIxC,IAEzBuC,EAAOD,EAAYE,KAEpBxC,MAQDyC,EAAa,SAAAC,GACjBnC,QAAQC,IAAmBkC,eAAAA,OAAAA,EAAI,GAAmBA,kBAAAA,OAAAA,EAAI,GAAtD,SAGIC,EAAW,SAAAH,GACfjC,QAAQqC,KAAqCJ,gCAAAA,OAAAA,EAA7C,+BAaFH,EAAmB,CAAEG,GAAI,KAAM/B,KAAKgC,GAAYI,MAAMF,GACtDN,EAAmB,CAAEG,GAAI,KAAM/B,KAAKgC,GAAYI,MAAMF,GACtDN,EAAmB,CAAEG,GAAI,KAAM/B,KAAKgC,GAAYI,MAAMF,GACtDN,EAAmB,CAAEG,GAAI,KAAM/B,KAAKgC,GAAYI,MAAMF;;AC1DtD,aAJA,QAAA,cAEA,QAAA,eACA,QAAA,eACA,QAAA","file":"src.1fe00218.js","sourceRoot":"..\\src","sourcesContent":["// Задание 1\r\n// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\" через ms миллисекунд.\r\n// Значением исполнившегося промиса должно быть то кол - во миллисекунд которое передали во время вызова функции delay.\r\n\r\nconst delay = ms => {\r\n  return new Promise(resolve => {\r\n    setTimeout(() => {\r\n      resolve(`${ms}`);\r\n    }, ms);\r\n  });\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\n\r\nconst inputMsEl = document.querySelector('.input-ms');\r\nconst delayTimeEl = document.querySelector('.time-ms');\r\nconst btnEl = document.querySelector('.btn-ms');\r\n\r\nlet inputValue = '';\r\n\r\ninputMsEl.addEventListener('blur', e => {\r\n  inputValue = +e.target.value;\r\n});\r\n\r\nbtnEl.addEventListener('click', () => {\r\n  delay(inputValue).then(value => (delayTimeEl.textContent = value));\r\n});\r\n","// Задание 2\r\n// Перепиши функцию toggleUserState() так, чтобы она не использовала callback - функцию callback, а принимала всего два параметра allUsers\r\n// и userName и возвращала промис.\r\n\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\n// const toggleUserState = (allUsers, userName, callback) => {\r\n//   const updatedUsers = allUsers.map(user =>\r\n//     user.name === userName ? { ...user, active: !user.active } : user,\r\n//   );\r\n\r\n//   callback(updatedUsers);\r\n// };\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\n// /*\r\n//  * Сейчас работает так\r\n//  */\r\n// toggleUserState(users, 'Mango', logger);\r\n// toggleUserState(users, 'Lux', logger);\r\n\r\nconst toggleUserStateNew = (allUsers, userName) => {\r\n  return new Promise(resolve => {\r\n    resolve(\r\n      allUsers.map(user =>\r\n        user.name === userName ? { ...user, active: !user.active } : user,\r\n      ),\r\n    );\r\n  });\r\n};\r\n\r\n/*\r\n * Должно работать так\r\n */\r\ntoggleUserStateNew(users, 'Mango').then(logger);\r\ntoggleUserStateNew(users, 'Lux').then(logger);\r\n","// Задание 3\r\n// Перепиши функцию makeTransaction() так, чтобы она не использовала callback - функции onSuccess и onError,\r\n// а принимала всего один параметр transaction и возвращала промис.\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\n// const makeTransaction = (transaction, onSuccess, onError) => {\r\n//   const delay = randomIntegerFromInterval(200, 500);\r\n\r\n//   setTimeout(() => {\r\n//     const canProcess = Math.random() > 0.3;\r\n\r\n//     if (canProcess) {\r\n//       onSuccess(transaction.id, delay);\r\n//     } else {\r\n//       onError(transaction.id);\r\n//     }\r\n//   }, delay);\r\n// };\r\n\r\nconst makeTransactionNew = transaction => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n\r\n      if (canProcess) {\r\n        resolve([transaction.id, delay]);\r\n      } else {\r\n        reject(transaction.id);\r\n      }\r\n    }, delay);\r\n  });\r\n};\r\n\r\n// const logSuccess = (id, time) => {\r\n//   console.log(`Transaction ${id} processed in ${time}ms`);\r\n// };\r\n\r\nconst logSuccess = arr => {\r\n  console.log(`Transaction ${arr[0]} processed in ${arr[1]} ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n/*\r\n * Работает так\r\n */\r\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n/*\r\n * Должно работать так\r\n */\r\nmakeTransactionNew({ id: 70 }).then(logSuccess).catch(logError);\r\nmakeTransactionNew({ id: 71 }).then(logSuccess).catch(logError);\r\nmakeTransactionNew({ id: 72 }).then(logSuccess).catch(logError);\r\nmakeTransactionNew({ id: 73 }).then(logSuccess).catch(logError);\r\n","import './main.css';\r\n\r\nimport './js/task-1';\r\nimport './js/task-2';\r\nimport './js/task-3';\r\n"]}